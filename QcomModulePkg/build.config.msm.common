################################################################################
## Inheriting configs from ACK
if [ -f "${ROOT_DIR}/common/build.config.common" ]; then
    . "${ROOT_DIR}/common/build.config.common"
fi

PREBUILT_PYTHON_PATH=prebuilts/build-tools/path/linux-x86/python3

if [ "${MSM_ARCH}" = "pineapple" ] || [ "${MSM_ARCH}" = "gen3auto" ]; then
CLANG_VERSION=r458507
CLANG_PREBUILT_BIN=prebuilts/clang/host/linux-x86/clang-${CLANG_VERSION}/bin
fi

USER_BUILD_VARIANT=0
if [ "${TARGET_BUILD_VARIANT}" = "user" ]; then
  USER_BUILD_VARIANT=1
fi

MAKE_FLAGS=("BOARD_BOOTLOADER_PRODUCT_NAME=${MSM_ARCH}")
MAKE_FLAGS+=("TARGET_ARCHITECTURE=${BOOTLOADER_ARCH}")
if [ -n "${VERIFIED_BOOT_LE}" ]; then
  MAKE_FLAGS+=("VERIFIED_BOOT_LE=${VERIFIED_BOOT_LE}")
fi
if [ -n "${VERIFIED_BOOT_ENABLED}" ]; then
  MAKE_FLAGS+=("VERIFIED_BOOT_ENABLED=${VERIFIED_BOOT_ENABLED}")
fi
if [ -n "${EARLY_ETH_ENABLED}" ]; then
  MAKE_FLAGS+=("EARLY_ETH_ENABLED=${EARLY_ETH_ENABLED}")
fi
if [ -n "${EARLY_ETH_AS_DLKM}" ]; then
  MAKE_FLAGS+=("EARLY_ETH_AS_DLKM=${EARLY_ETH_AS_DLKM}")
fi
if [ -n "${TARGET_SUPPORTS_EARLY_USB_INIT}" ]; then
  MAKE_FLAGS+=("TARGET_SUPPORTS_EARLY_USB_INIT=${TARGET_SUPPORTS_EARLY_USB_INIT}")
fi
if [ -n "${HIBERNATION_SUPPORT}" ]; then
  MAKE_FLAGS+=("HIBERNATION_SUPPORT=${HIBERNATION_SUPPORT}")
fi
if [ -n "${HIBERNATION_PARTITION_NAME}" ]; then
  MAKE_FLAGS+=("HIBERNATION_PARTITION_NAME=${HIBERNATION_PARTITION_NAME}")
fi
if [ -n "${AB_RETRYCOUNT_DISABLE}" ]; then
  MAKE_FLAGS+=("AB_RETRYCOUNT_DISABLE=${AB_RETRYCOUNT_DISABLE}")
fi
if [ -n "${TARGET_BOARD_TYPE_AUTO}" ]; then
  MAKE_FLAGS+=("TARGET_BOARD_TYPE_AUTO=${TARGET_BOARD_TYPE_AUTO}")
fi
if [ -n "${VERITY_LE}" ]; then
  MAKE_FLAGS+=("VERITY_LE=${VERITY_LE}")
fi
if [ -n "${USER_BUILD_VARIANT}" ]; then
  MAKE_FLAGS+=("USER_BUILD_VARIANT=${USER_BUILD_VARIANT}")
fi
if [ -n "${DISABLE_PARALLEL_DOWNLOAD_FLASH}" ]; then
  MAKE_FLAGS+=("DISABLE_PARALLEL_DOWNLOAD_FLASH=${DISABLE_PARALLEL_DOWNLOAD_FLASH}")
fi
if [ -n "${DISABLE_KERNEL_PROTOCOL}" ]; then
  MAKE_FLAGS+=("DISABLE_KERNEL_PROTOCOL=${DISABLE_KERNEL_PROTOCOL}")
fi
if [ -n "${DISABLE_MULTI_BOOT}" ]; then
  MAKE_FLAGS+=("DISABLE_MULTI_BOOT=${DISABLE_MULTI_BOOT}")
fi
if [ -n "${ENABLE_LE_VARIANT}" ]; then
  MAKE_FLAGS+=("ENABLE_LE_VARIANT=${ENABLE_LE_VARIANT}")
fi
if [ -n "${BUILD_USES_RECOVERY_AS_BOOT}" ]; then
  MAKE_FLAGS+=("BUILD_USES_RECOVERY_AS_BOOT=${BUILD_USES_RECOVERY_AS_BOOT}")
fi
if [ -n "${INIT_BIN_LE}" ]; then
  MAKE_FLAGS+=("INIT_BIN_LE=${INIT_BIN_LE}")
fi
if [ -n "${UBSAN_GCC_FLAG_UNDEFINED}" ]; then
  MAKE_FLAGS+=("UBSAN_UEFI_GCC_FLAG_UNDEFINED=${UBSAN_GCC_FLAG_UNDEFINED}")
fi
if [ -n "${UBSAN_GCC_FLAG_ALIGNMENT}" ]; then
  MAKE_FLAGS+=("UBSAN_UEFI_GCC_FLAG_ALIGNMENT=${UBSAN_GCC_FLAG_ALIGNMENT}")
fi
if [ -n "${NAND_SQUASHFS_SUPPORT}" ]; then
  MAKE_FLAGS+=("NAND_SQUASHFS_SUPPORT=${NAND_SQUASHFS_SUPPORT}")
fi
if [ -n "${BASE_ADDRESS}" ]; then
  MAKE_FLAGS+=("BASE_ADDRESS=${BASE_ADDRESS}")
fi
if [ -n "${TARGET_LINUX_BOOT_CPU_ID}" ]; then
  MAKE_FLAGS+=("TARGET_LINUX_BOOT_CPU_ID=${TARGET_LINUX_BOOT_CPU_ID}")
fi
if [ -n "${HIBERNATION_SUPPORT_NO_AES}" ]; then
  MAKE_FLAGS+=("HIBERNATION_SUPPORT_NO_AES=${HIBERNATION_SUPPORT_NO_AES}")
fi
if [ -n "${HIBERNATION_SUPPORT_AES}" ]; then
  MAKE_FLAGS+=("HIBERNATION_SUPPORT_AES=${HIBERNATION_SUPPORT_AES}")
  MAKE_FLAGS+=("HIBERNATION_SUPPORT_NO_AES=1")
fi
if [ -n "${UBUNTU_AB_OTA}" ]; then
  MAKE_FLAGS+=("UBUNTU_AB_OTA=${UBUNTU_AB_OTA}")
fi
if [ -n "${RW_ROOTFS}" ]; then
  MAKE_FLAGS+=("RW_ROOTFS=${RW_ROOTFS}")
fi
if [ -n "${TARGET_AUDIO_FRAMEWORK}" ]; then
  MAKE_FLAGS+=("TARGET_AUDIO_FRAMEWORK=${TARGET_AUDIO_FRAMEWORK}")
fi
if [ -n "${ENABLE_EARLY_SERVICES}" ]; then
  MAKE_FLAGS+=("ENABLE_EARLY_SERVICES=${ENABLE_EARLY_SERVICES}")
fi
if [ -n "${KERNEL_LOAD_ADDRESS}" ]; then
  MAKE_FLAGS+=("KERNEL_LOAD_ADDRESS=${KERNEL_LOAD_ADDRESS}")
fi
if [ -n "${KERNEL_SIZE_RESERVED}" ]; then
  MAKE_FLAGS+=("KERNEL_SIZE_RESERVED=${KERNEL_SIZE_RESERVED}")
fi
if [ -n "${NAND_UBI_VOLUME_FLASHING_ENABLED}" ]; then
  MAKE_FLAGS+=("NAND_UBI_VOLUME_FLASHING_ENABLED=${NAND_UBI_VOLUME_FLASHING_ENABLED}")
fi
if [ -n "${CMDLINE_SHOW_SECURE_BOOT_STATUS}" ]; then
  MAKE_FLAGS+=("CMDLINE_SHOW_SECURE_BOOT_STATUS=${CMDLINE_SHOW_SECURE_BOOT_STATUS}")
fi
if [ -n "${INTEGRITY_LE_IMA}" ]; then
  MAKE_FLAGS+=("INTEGRITY_LE_IMA=${INTEGRITY_LE_IMA}")
fi
if [ -n "${INTEGRITY_LE_EVM}" ]; then
  MAKE_FLAGS+=("INTEGRITY_LE_EVM=${INTEGRITY_LE_EVM}")
fi
